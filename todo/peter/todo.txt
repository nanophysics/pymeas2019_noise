




















step_size sprunghoehen, in bändern E12
time_series

Idee Live update:
https://pythonprogramming.net/python-matplotlib-live-updating-graphs/
https://towardsdatascience.com/animations-with-matplotlib-d96375c5442c


zusammenfassung: spannung je dekade?

ordner farben rotieren?


---------------------------------------------------------
old

Damit weniger Flickernoise:
Optimaler Range, Offset automatisch abgleichen und einrechnen.




je Fir Stufe:


namen:
fft density, ganz am schluss in bändern E12


DONE:
  fmax_Hz = 1.0 / (dt_s * 2) # highest frequency in spectogram
  useful_part = 0.75 # depending on the downsampling, useful part is the non influenced part by the low pass filtering of the FIR stage
  f_high_limit_Hz = useful_part * fmax_Hz
  f_low_limit_Hz = f_high_limit_Hz / DECIMATE_FACTOR   # every FIR stage reduces sampling frequency by factor DECIMATE_FACTOR


Spektren zusammenfügen für eine samplefrequenz:
z.B. first , siehe join.jpg

alle samplefrequenzen zusammen
gemäss vorgaben user mit frequenzgrenzen je samplefrequenz
die einzelnen messwerte den E12 bändern zuordnen

band für grenze zuordnung: von sqrt(E12vorher * E12) bis sqrt(E12 * E12nachher)
unterste und oberste frequenz aus E12 wird nicht bestimmt.




ideen average fuer kleineren noise:
  PS5000A_RATIO_MODE_AVERAGE

  downsampling ratio

  int16_t overflow[MAX_WAVEFORMS];
  ps5000aGetValuesBulk
  (
  handle,
  &noOfSamples, // set to MAX_SAMPLES on entering the function
  10, // fromSegmentIndex
  19, // toSegmentIndex
  1, // downsampling ratio
  PS5000A_RATIO_MODE_NONE, // downsampling ratio mode
  overflow // indices 10 to 19 will be populated
  )

  * maxDownSampleRatio


  max ratio 256



  , ratio_mode='AVERAGE', downSampleRatio = 256